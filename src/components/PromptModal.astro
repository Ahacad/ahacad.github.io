---
// src/components/PromptModal.astro
import type { CollectionEntry } from 'astro:content';
import { PromptIcon } from './PromptIcon';

interface Props {
	prompt: CollectionEntry<'prompts'>;
	modalId: string;
}

const { prompt, modalId } = Astro.props;
const { Content } = await prompt.render();
const copyTextId = `copy-text-${prompt.slug}`;

// Define icon based on role or tags
function getIconForPrompt(prompt) {
  const role = prompt.data.role.toLowerCase();
  const tags = prompt.data.tags ? prompt.data.tags.map(t => t.toLowerCase()) : [];
  
  if (role.includes('developer') || tags.includes('code') || tags.includes('coding') || tags.includes('programming')) {
    return { name: 'Code', label: 'Code' };
  } else if (role.includes('writer') || tags.includes('writing') || tags.includes('creative')) {
    return { name: 'PenLine', label: 'Writing' };
  } else if (role.includes('data') || tags.includes('data') || tags.includes('analysis')) {
    return { name: 'BarChart', label: 'Data' };
  } else if (role.includes('researcher') || tags.includes('research')) {
    return { name: 'Search', label: 'Research' };
  } else if (role.includes('teacher') || tags.includes('education')) {
    return { name: 'BookOpen', label: 'Education' };
  } else if (role.includes('business') || tags.includes('business')) {
    return { name: 'Briefcase', label: 'Business' };
  } else if (role.includes('assistant') || tags.includes('assistant')) {
    return { name: 'HelpCircle', label: 'Assistant' };
  } else {
    return { name: 'MessageSquare', label: 'Prompt' };
  }
}

const promptIcon = getIconForPrompt(prompt);
---

<div id={modalId} class="fixed inset-0 bg-slate-900/50 backdrop-blur-sm z-50 flex items-center justify-center p-4 hidden" aria-labelledby={`title-${modalId}`} role="dialog" aria-modal="true">
  <div class="bg-white dark:bg-slate-800 rounded-lg shadow-xl max-w-3xl w-full max-h-[90vh] flex flex-col">
    <!-- Modal Header -->
    <div class="p-6 border-b border-slate-200 dark:border-slate-700 flex justify-between items-center sticky top-0 bg-white dark:bg-slate-800 rounded-t-lg z-10">
      <div class="flex items-center gap-3">
        <div class="bg-indigo-100 dark:bg-indigo-900/40 text-indigo-700 dark:text-indigo-300 p-2 rounded-lg">
          <PromptIcon iconName={promptIcon.name} />
        </div>
        <div>
          <h3 id={`title-${modalId}`} class="text-xl font-bold text-slate-800 dark:text-slate-100">{prompt.data.title}</h3>
          <p class="text-sm font-medium text-indigo-600 dark:text-indigo-400">{prompt.data.role}</p>
        </div>
      </div>
      
      <div class="flex gap-2">
        <!-- Copy Button -->
        <button id={`copy-btn-modal-${prompt.slug}`} class="bg-slate-100 hover:bg-slate-200 dark:bg-slate-700 dark:hover:bg-slate-600 text-slate-600 dark:text-slate-300 p-2 rounded-lg transition-colors">
          <span class="sr-only">Copy prompt</span>
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4">
            <rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect>
            <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path>
          </svg>
        </button>
        
        <!-- Close Button -->
        <button class="close-modal bg-slate-100 hover:bg-slate-200 dark:bg-slate-700 dark:hover:bg-slate-600 text-slate-600 dark:text-slate-300 p-2 rounded-lg transition-colors">
          <span class="sr-only">Close</span>
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
    </div>
    
    <!-- Modal Content -->
    <div class="p-6 overflow-y-auto flex-grow">
      <div class="prose prose-sm dark:prose-invert max-w-none text-slate-600 dark:text-slate-300">
        <Content />
      </div>
      
      {prompt.data.tags && prompt.data.tags.length > 0 && (
        <div class="mt-6 pt-4 border-t border-slate-200 dark:border-slate-700">
          <p class="text-xs text-slate-500 dark:text-slate-400 mb-2">Tags:</p>
          <div class="flex flex-wrap gap-2">
            {prompt.data.tags.map(tag => (
              <span class="bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 text-xs px-2 py-1 rounded-full">
                #{tag}
              </span>
            ))}
          </div>
        </div>
      )}
    </div>
  </div>
  
  <!-- Hidden textarea for copying -->
  <textarea id={copyTextId} class="sr-only" readonly>{prompt.body}</textarea>
</div>

<script define:vars={{ modalId, copyTextId, promptSlug: prompt.slug }}>
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById(modalId);
    const closeButtons = modal.querySelectorAll('.close-modal');
    const copyBtn = document.getElementById(`copy-btn-modal-${promptSlug}`);
    const textArea = document.getElementById(copyTextId);
    
    // Make sure modal is hidden initially using the standard class
    // We're not using our custom class to avoid conflicts with existing code
    if (!modal.classList.contains('hidden')) {
      modal.classList.add('hidden');
    }
    
    // Close modal when clicking close button
    closeButtons.forEach(button => {
      button.addEventListener('click', () => {
        modal.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
      });
    });
    
    // Close modal when clicking outside
    modal.addEventListener('click', (e) => {
      if (e.target === modal) {
        modal.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
      }
    });
    
    // Close modal on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && !modal.classList.contains('hidden')) {
        modal.classList.add('hidden');
        document.body.classList.remove('overflow-hidden');
      }
    });
    
    // Copy functionality
    copyBtn.addEventListener('click', () => {
      textArea.select();
      navigator.clipboard.writeText(textArea.value);
      
      // Show copied confirmation
      const originalSvg = copyBtn.innerHTML;
      copyBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4">
          <polyline points="20 6 9 17 4 12"></polyline>
        </svg>
      `;
      copyBtn.classList.remove('bg-slate-100', 'hover:bg-slate-200', 'dark:bg-slate-700', 'dark:hover:bg-slate-600');
      copyBtn.classList.add('bg-green-100', 'text-green-600', 'dark:bg-green-800', 'dark:text-green-300');
      
      setTimeout(() => {
        copyBtn.innerHTML = originalSvg;
        copyBtn.classList.add('bg-slate-100', 'hover:bg-slate-200', 'dark:bg-slate-700', 'dark:hover:bg-slate-600');
        copyBtn.classList.remove('bg-green-100', 'text-green-600', 'dark:bg-green-800', 'dark:text-green-300');
      }, 2000);
    });
  });
</script>

<style>
  /* Keep animation styles local to this component */
  @keyframes modalFade {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  @keyframes modalSlide {
    from { transform: translateY(-10px); opacity: 0; }
    to { transform: translateY(0); opacity: 1; }
  }
  
  /* Apply animations when modal is shown */
  #modalId:not(.hidden) {
    animation: modalFade 0.2s ease-in-out;
  }
  
  #modalId:not(.hidden) > div {
    animation: modalSlide 0.2s ease-out;
  }
</style>
