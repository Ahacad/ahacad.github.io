---
// src/components/PromptCard.astro
import type { CollectionEntry } from 'astro:content';
import PromptModal from './PromptModal.astro';
import { PromptIcon } from './PromptIcon';

interface Props {
	prompt: CollectionEntry<'prompts'>;
}

const { prompt } = Astro.props;

// Define icon based on role or tags
function getIconForPrompt(prompt) {
  const role = prompt.data.role.toLowerCase();
  const tags = prompt.data.tags ? prompt.data.tags.map(t => t.toLowerCase()) : [];
  
  if (role.includes('developer') || tags.includes('code') || tags.includes('coding') || tags.includes('programming')) {
    return { name: 'Code', label: 'Code' };
  } else if (role.includes('writer') || tags.includes('writing') || tags.includes('creative')) {
    return { name: 'PenLine', label: 'Writing' };
  } else if (role.includes('data') || tags.includes('data') || tags.includes('analysis')) {
    return { name: 'BarChart', label: 'Data' };
  } else if (role.includes('researcher') || tags.includes('research')) {
    return { name: 'Search', label: 'Research' };
  } else if (role.includes('teacher') || tags.includes('education')) {
    return { name: 'BookOpen', label: 'Education' };
  } else if (role.includes('business') || tags.includes('business')) {
    return { name: 'Briefcase', label: 'Business' };
  } else if (role.includes('assistant') || tags.includes('assistant')) {
    return { name: 'HelpCircle', label: 'Assistant' };
  } else {
    return { name: 'MessageSquare', label: 'Prompt' };
  }
}

const promptIcon = getIconForPrompt(prompt);
const promptId = `prompt-${prompt.slug}`;
const modalId = `modal-${prompt.slug}`;
const copyBtnId = `copy-${prompt.slug}`;

// Get the first 150 characters of the prompt for preview
const previewLength = 150;
const promptText = prompt.body;
const promptPreview = promptText.length > previewLength 
  ? promptText.substring(0, previewLength) + '...' 
  : promptText;
---

<div class="bg-white dark:bg-slate-800 rounded-lg shadow-md overflow-hidden transition-all duration-300 hover:shadow-lg border border-slate-200 dark:border-slate-700 relative group cursor-pointer prompt-card" data-modal-id={modalId}>
  <!-- Card Header -->
  <div class="p-5 flex justify-between items-start">
    <div class="flex items-center gap-3">
      <div class="bg-indigo-100 dark:bg-indigo-900/40 text-indigo-700 dark:text-indigo-300 p-2 rounded-lg">
        <PromptIcon iconName={promptIcon.name} />
      </div>
      <div>
        <h3 class="text-xl font-bold text-slate-800 dark:text-slate-100">{prompt.data.title}</h3>
        <p class="text-sm font-medium text-indigo-600 dark:text-indigo-400">{prompt.data.role}</p>
      </div>
    </div>
    
    <!-- Copy Button -->
    <button id={copyBtnId} class="copy-btn bg-slate-100 hover:bg-slate-200 dark:bg-slate-700 dark:hover:bg-slate-600 text-slate-600 dark:text-slate-300 p-2 rounded-lg transition-colors z-10">
      <span class="sr-only">Copy prompt</span>
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4">
        <rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect>
        <path d="M4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path>
      </svg>
    </button>
  </div>
  
  <!-- Card Content -->
  <div class="px-5 pb-5">
    <!-- Preview of prompt content -->
    <div id={promptId} class="prose prose-sm dark:prose-invert max-w-none text-slate-600 dark:text-slate-300">
      <div class="prompt-preview line-clamp-3">
        {promptPreview}
      </div>
    </div>
  </div>
  
  <!-- Card Footer -->
  {prompt.data.tags && prompt.data.tags.length > 0 && (
    <div class="px-5 pb-5">
      <div class="flex flex-wrap gap-2">
        {prompt.data.tags.map(tag => (
          <span class="bg-slate-100 dark:bg-slate-700 text-slate-600 dark:text-slate-300 text-xs px-2 py-1 rounded-full">
            #{tag}
          </span>
        ))}
      </div>
    </div>
  )}

  <!-- Hidden textarea for copying -->
  <textarea id={`${promptId}-text`} class="sr-only" readonly>{prompt.body}</textarea>
</div>

<!-- Modal for Full Prompt -->
<PromptModal prompt={prompt} modalId={modalId} />

<script define:vars={{ promptId, modalId, copyBtnId }}>
  document.addEventListener('DOMContentLoaded', () => {
    const card = document.querySelector(`[data-modal-id="${modalId}"]`);
    const modal = document.getElementById(modalId);
    
    // Handle click on card to open modal
    function openModal(e) {
      // Don't open modal if copy button was clicked
      if (e.target.closest(`#${copyBtnId}`)) {
        e.stopPropagation();
        return;
      }
      
      // Remove the hidden class to show the modal
      modal.classList.remove('hidden');
      document.body.classList.add('overflow-hidden');
    }
    
    card.addEventListener('click', openModal);
    
    // Handle copy functionality
    const copyBtn = document.getElementById(copyBtnId);
    const textArea = document.getElementById(`${promptId}-text`);
    
    copyBtn.addEventListener('click', (e) => {
      e.stopPropagation(); // Prevent card click event
      textArea.select();
      navigator.clipboard.writeText(textArea.value);
      
      // Show copied confirmation
      const originalSvg = copyBtn.innerHTML;
      copyBtn.innerHTML = `
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="h-4 w-4">
          <polyline points="20 6 9 17 4 12"></polyline>
        </svg>
      `;
      copyBtn.classList.remove('bg-slate-100', 'hover:bg-slate-200', 'dark:bg-slate-700', 'dark:hover:bg-slate-600');
      copyBtn.classList.add('bg-green-100', 'text-green-600', 'dark:bg-green-800', 'dark:text-green-300');
      
      setTimeout(() => {
        copyBtn.innerHTML = originalSvg;
        copyBtn.classList.add('bg-slate-100', 'hover:bg-slate-200', 'dark:bg-slate-700', 'dark:hover:bg-slate-600');
        copyBtn.classList.remove('bg-green-100', 'text-green-600', 'dark:bg-green-800', 'dark:text-green-300');
      }, 2000);
    });
  });
</script>

<style>
  /* Add any additional styles here */
  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
  
  .prompt-card {
    transition: transform 0.2s ease-in-out;
  }
  
  .prompt-card:hover {
    transform: translateY(-2px);
  }
</style>
